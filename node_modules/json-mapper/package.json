{
  "name": "json-mapper",
  "version": "0.0.5",
  "description": "simple json mapper to ",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dregenor/jsonMapper.git"
  },
  "keywords": [
    "json",
    "map",
    "mapper",
    "transform",
    "transformation",
    "json to json",
    "converter"
  ],
  "author": {
    "name": "dregenor"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "f38a39cc13278827cb175344346d0e651149fd5e",
  "bugs": {
    "url": "https://github.com/dregenor/jsonMapper/issues"
  },
  "readme": "json-mapper\n==========\n\nSimple json mapper\n\n- [How to use](#how-to-use)\n- [Shut up and show me SIMPLE convert](#shut-up-and-show-me-simple-convert)\n- [Helpers](#helpers)\n\n\nHow to use\n----------\n\nWery simple case\n\n\n```js\nvar input = {\n    user:{\n        name:\"John\",\n        nick:\"C00lHacker\"\n    }\n};\n\nvar JM = require('json-mapper');\n\nvar converter =  JM.makeConverter({\n    name:function(input){\n        if (!input.user){\n            return;\n        } else {\n            return input.user.name\n        }\n    }\n});\n\nvar result = converter(input);\n\nconsole.log(result); // should be {name:\"John\"}\n```\n\nfor add more sugar i have factory getVal(path)\n\n```js\n\n\n\nvar converter =  JM.makeConverter({\n    name:JV.getVal(\"user.name\");\n});\n```\n\nAnd if i write just \"user.name\" it is be synonym JM.getVal(\"user.name\")\n\n\n```js\n\nvar converter =  JM.makeConverter({\n    name:\"user.name\";\n});\n\n```\n\nIf you wonna chain callbacks use `ch` factory\n\n\n```js\n\nvar input = {\n  user:{\n      name:\"Alex\",\n      nickname:\"FOfan\"\n  },\n  locations:[\n      {x:1,y:21}, // i need this x\n      {x:2,y:22},\n      {x:3,y:23},\n      {x:4,y:24},\n      {x:5,y:25},\n      {x:6,y:26},\n      {x:7,y:27},\n      {x:8,y:28},\n      {x:9,y:29},\n      {x:10,y:30},\n      {x:11,y:31},\n      {x:12,y:32}\n  ],\n  uuid:'ffffffff-aaaaaaaa-c0c0afafc1c1fefe0-cfcf1234'\n};\n\n\nvar JM = require('json-mapper');\n\nvar converter  = JM.makeConverter({\n    val : JM.ch(\n            function(input){ return input.locations; },\n            function(input){ return input[0] },\n            function(input){ return input.x}\n            )\n\n});\n\nvar result = converter(input); // should be {val:1}\n\n```\n\n\nfor simplify JM.ch i use array\n\n```js\n\nvar input = {\n  user:{\n      name:\"Alex\",\n      nickname:\"FOfan\"\n  },\n  locations:[\n      {x:1,y:21}, // i need this x\n      {x:2,y:22},\n      {x:3,y:23},\n      {x:4,y:24},\n      {x:5,y:25},\n      {x:6,y:26},\n      {x:7,y:27},\n      {x:8,y:28},\n      {x:9,y:29},\n      {x:10,y:30},\n      {x:11,y:31},\n      {x:12,y:32}\n  ],\n  uuid:'ffffffff-aaaaaaaa-c0c0afafc1c1fefe0-cfcf1234'\n};\n\n\nvar JM = require('json-mapper');\n\nvar converter  = JM.makeConverter({\n    val : [  function(input){ return input.locations; },\n             function(input){ return input[0] },\n             function(input){ return input.x}\n          ]\n});\n\nvar result = converter(input); // should be {val:1}\n\n```\n\n\nJM.ch function also can convert \"some.path\" to JM.getVal(\"some.path\")\n\nalso for processing arrays present map factory\n\n```js\n\nvar input = {\n  user:{\n      name:\"Alex\",\n      nickname:\"FOfan\"\n  },\n  locations:[\n      {x:1,y:21}, // i need this x\n      {x:2,y:22},\n      {x:3,y:23},\n      {x:4,y:24},\n      {x:5,y:25},\n      {x:6,y:26},\n      {x:7,y:27},\n      {x:8,y:28},\n      {x:9,y:29},\n      {x:10,y:30},\n      {x:11,y:31},\n      {x:12,y:32}\n  ],\n  uuid:'ffffffff-aaaaaaaa-c0c0afafc1c1fefe0-cfcf1234'\n};\n\n\nvar JM = require('json-mapper');\n\nvar converter  = JM.makeConverter({\n    val : JM.ch(\"locations\", JM.map(function(input){ return input.x }))\n});\n\nvar result = converter(input); // should be {val:[1,2,3,4,5,6,7,8,9,10,11,12]}\n\n```\n\nor\n\n```js\n    var converter  = JM.makeConverter({\n        val : [\"locations\", JM.map(\"x\")]\n    });\n```\n\nfor simple conver path to getVal callback i use JM.makeCb(val);\n\nif val is function then it is just return.\n\nif val is string then return getVal(val).\n\nif val is array then return ch.apply(null,val); .\n\nif val is hash then return schema(val); .\n\n\n\nNew feature is '$root' alias\n\n```js\n\n var JM = require('json-mapper');\n\n var input = {\n        uuid:\"1233123123\",\n        user:{\n            name:\"sergey\"\n        },\n        objects:[\n            \"atoken\",\n            \"btoken\",\n            \"ctoken\",\n            \"dtoken\",\n            \"etoken\",\n            \"Fplane\",\n            \"Splane\",\n            \"nodejs\",\n            \"memcache\",\n            \"sql\",\n            \"tpl\",\n            \"ejs\"\n        ]\n    };\n\n    var converter = JM.makeConverter({\n        originalObject:'$root',\n        uuid:\"uuid\",\n        link:[\n            JM.helpers.templateStrong(\"http://127.0.0.1/users/?name={user.name}\"),\n            JM.helpers.templateStrong('<a href=\"{$root}\">user</a>')\n        ],\n        objects:[\"objects\",JM.map(JM.helpers.templateStrong(\"http://127.0.0.1/objects/{$root}\"))]\n    });\n\n    console.log('\\n\\n\\n\\ convert with template & root',converter(input));\n```\n\nresult\n\n```json\n\n{\n    originalObject:  {\n        uuid: '1233123123',\n        user: { name: 'sergey' },\n        objects: [\n            'atoken',\n            'btoken',\n            'ctoken',\n            'dtoken',\n            'etoken',\n            'Fplane',\n            'Splane',\n            'nodejs',\n            'memcache',\n            'sql',\n            'tpl',\n            'ejs'\n        ]\n    },\n\n    uuid: '1233123123',\n    link: '<a href=\"http://127.0.0.1/users/?name=sergey\">user</a>',\n    objects:  [\n        'http://127.0.0.1/objects/atoken',\n        'http://127.0.0.1/objects/btoken',\n        'http://127.0.0.1/objects/ctoken',\n        'http://127.0.0.1/objects/dtoken',\n        'http://127.0.0.1/objects/etoken',\n        'http://127.0.0.1/objects/Fplane',\n        'http://127.0.0.1/objects/Splane',\n        'http://127.0.0.1/objects/nodejs',\n        'http://127.0.0.1/objects/memcache',\n        'http://127.0.0.1/objects/sql',\n        'http://127.0.0.1/objects/tpl',\n        'http://127.0.0.1/objects/ejs'\n    ]\n}\n\n```\n\nShut up and show me SIMPLE convert\n--------\n\nok\n\n```js\nvar input = {\n  user:{\n      name:\"Alex\",\n      nickname:\"FOfan\"\n  },\n  locations:[\n      {x:1,y:21}, // i need this x\n      {x:2,y:22},\n      {x:3,y:23},\n      {x:4,y:24},\n      {x:5,y:25},\n      {x:6,y:26},\n      {x:7,y:27},\n      {x:8,y:28},\n      {x:9,y:29},\n      {x:10,y:30},\n      {x:11,y:31},\n      {x:12,y:32}\n  ],\n  uuid:'ffffffff-aaaaaaaa-c0c0afafc1c1fefe0-cfcf1234'\n};\n\n\nvar JM = require('json-mapper');\n\nvar converter  = JM.makeConverter({\n    all_x : [\"locations\", JM.map(\"x\")],\n    all_y : [\"locations\", JM.map(\"y\")],\n    x_sum_y: [\"locations\", JM.map(function(input){\n        return input.x + input.y\n    })],\n    locations_count:[\"locations\",function(arr){\n        return arr.length;\n    }],\n    locations_count_hack:\"locations.length\",\n    just_mappet_name:\"user.name\",\n    another_object:{\n        nickname:\"user.nickname\",\n        location_0_x:\"locations.0.x\"\n    }\n});\n\nvar result = converter(input);\n\nconsole.log(result);\n\n```\n\nresult is\n\n```json\n{\n  \"all_x\":   [ 1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12 ],\n  \"all_y\":   [ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ],\n  \"x_sum_y\": [ 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44 ],\n  \"locations_count\": 12,\n  \"locations_count_hack\": 12,\n  \"just_mappet_name\": \"Alex\",\n  \"another_object\": {\n    \"nickname\": \"FOfan\",\n    \"location_0_x\": 1\n  }\n}\n```\n\n\nHelpers\n========\n\n\ntemplate and templateStrong\n---------\njust example\n\n```js\n\nvar JM = require('json-mapper');\n\nvar input = {\n    uuid:\"1233123123\",\n    user:{\n        name:\"sergey\"\n    },\n    objects:[\n        {id:1001,name:\"atoken\"},\n        {id:1002,name:\"btoken\"},\n        {id:1003,name:\"ctoken\"},\n        {id:1004,name:\"dtoken\"},\n        {id:1005,name:\"etoken\"},\n        {id:1006,name:\"Fplane\"},\n        {id:1007,name:\"Splane\"},\n        {id:1008,name:\"nodejs\"},\n        {id:1009,name:\"memcache\"},\n        {id:1010,name:\"sql\"},\n        {id:1011,name:\"tpl\"},\n        {id:1012,name:\"ejs\"}\n    ]\n};\n\n\nvar converter = JM.makeConverter({\n    uuid:           \"uuid\",\n    hrefStrong:     JM.helpers.templateStrong(\"http://127.0.0.1/users/?name={user.name}\"),\n    href:           JM.helpers.template(\"http://127.0.0.1/users/?name={user.name}\"),\n    hrefStrongFail: JM.helpers.templateStrong(\"http://127.0.0.1/users/?name={user.undefinedKey}\"),\n    hreffail:       JM.helpers.template(\"http://127.0.0.1/users/?name={user.undefinedKey}\"),\n    objects:[\"objects\",JM.map({\n        href:JM.helpers.templateStrong(\"http://127.0.0.1/objects/{id}\")\n    })]\n});\n\nconsole.log('\\n\\n\\n convert with template \\n\\n', converter(input));\n\n```\n\nResult:\n\n```json \n {\n   uuid:        '1233123123',\n   hrefStrong:  'http://127.0.0.1/users/?name=sergey',\n   href:        'http://127.0.0.1/users/?name=sergey',\n   hreffail:    'http://127.0.0.1/users/?name=undefined',\n   objects:\n    [ { href: 'http://127.0.0.1/objects/1001' },\n      { href: 'http://127.0.0.1/objects/1002' },\n      { href: 'http://127.0.0.1/objects/1003' },\n      { href: 'http://127.0.0.1/objects/1004' },\n      { href: 'http://127.0.0.1/objects/1005' },\n      { href: 'http://127.0.0.1/objects/1006' },\n      { href: 'http://127.0.0.1/objects/1007' },\n      { href: 'http://127.0.0.1/objects/1008' },\n      { href: 'http://127.0.0.1/objects/1009' },\n      { href: 'http://127.0.0.1/objects/1010' },\n      { href: 'http://127.0.0.1/objects/1011' },\n      { href: 'http://127.0.0.1/objects/1012' } ]\n  }\n\n```\n\ntemplateStrong return undefined if one or more keys is undefined\n\n\ndef\n----\n\n```js\n\n\nvar JM = require('json-mapper');\n\nvar converter = JM.makeConverter({\n    uuid:           JM.helpers.def(\"14\")\n});\n\nconsole.log('\\n\\n\\n convert with default \\n\\n', converter({}));\n\n```\n\nresult\n```\n\n  {\n    uuid: '14'\n  }\n\n```\n\nJM.helpers.def(val) - always return val\n\n\n\nvalOrDef\n-----\n\n```js\n\n    var JM = require('json-mapper');\n\n\n    var converter = JM.makeConverter({\n        uuid:  [ 'uuid' , JM.helpers.def(\"14\") ],\n        uuid2: [ 'uuid2', JM.helpers.valOrDef(\"15\")]\n    });\n\n    console.log('\\n\\n\\n convert with default \\n\\n', converter({\n        \"uuid\":\"15\",\n        \"uuid2\":\"17\"\n    }));\n\n```\n\nresult\n\n```json\n\n{\n    uuid: '14',\n    uuid2: '17'\n}\n\n```\nif input in null or undefined valOrDef(val) return val else return input\n\n\ndict\n----\n\n\n```js\nvar JM = require('json-mapper');\n\n\n    var converter = JM.makeConverter({\n        type:  [\n            'type' ,\n            JM.helpers.dict({\n                1:\"fit\",\n                2:\"crop\",\n                3:\"fit\"\n            })\n        ]\n    });\n\n    console.log('\\n\\n\\n convert with default \\n\\n', converter({\n        \"type\":1\n    }));\n\n```\n\n\nresult\n\n```json\n\n { type: 'fit' }\n\n```\n\ntoBoolean, toNumber, toUndefined, filterUndefined\n----------------------------------------------\n```js\n    var JM = require('json-mapper');\n    var h = JM.helpers;\n\n     var converter = JM.makeConverter({\n            isGuest:['role', h.toBoolean],\n            isUser:['user', h.toBoolean],\n            userId:['userId', h.toNumber],\n            catalogId:['catalogId', h.toNumber],\n            catalogId2:['catalogId', h.toNumber, h.toUndefined],\n            catalogId3:['catalogId',h.filterUndefined(function(input){\n                // input always not undefined\n                return input + '1';\n            })],\n            catalogId4:['UndefinedCatalogId',h.filterUndefined(function(input){\n                // input always not undefined\n                return input + '1';\n            })]\n        });\n\n\n        console.log('\\n\\n\\n convert to boolean and to number \\n\\n', converter({\n            \"role\":2,\n            \"userId\":'13',\n            \"catalogId\":'somethingLiteral'\n        }));\n```\n\nresult\n\n```json\n\n{ isGuest: true,\n  userId: 13,\n  catalogId: NaN,\n  catalogId3: 'somethingLiteral1'\n}\n\n```\n\n\ndict make a dictionary and return value by key",
  "_id": "json-mapper@0.0.5",
  "dist": {
    "shasum": "80027c9132ab804d4b53f295c46f8369eadc5f5c"
  },
  "_from": "json-mapper@",
  "_resolved": "https://registry.npmjs.org/json-mapper/-/json-mapper-0.0.5.tgz"
}
